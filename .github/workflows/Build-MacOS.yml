name: Building GHDL on macOS

on:
  workflow_call:
    inputs:
      macos_image:
        description: 'Name of the macOS image.'
        required: true
        type: string
      gnat_arch:
        description: 'Architecture of the downloaded GNAT compiler (pre-compiled) from https://github.com/alire-project/GNAT-FSF-builds'
        required: true
        type: string
      gnat_version:
        description: 'Version of the downloaded GNAT compiler (pre-compiled) from https://github.com/alire-project/GNAT-FSF-builds'
        required: true
        type: string
      backend:
        description: 'GHDL backend'
        required: true
        type: string
      testsuites:
        description: 'GHDL testsuites to run'
        required: true
        type: string
    # Parameters created build artifacts
      macos_artifact:
        description: 'Name of the macOS build artifact.'
        required: true
        type: string
    outputs:
      ghdl_macos_artifact:
        description: "Artifact name for compiled GHDL for macOS."
        value: ${{ jobs.Build.outputs.ghdl_artifact }}

jobs:
  Build:
    name: Build GHDL on '${{ inputs.macos_image }}'
    runs-on: ${{ inputs.macos_image }}
    outputs:
      ghdl_artifact: ${{ steps.artifact_name.outputs.ghdl_artifact }}

    defaults:
      run:
        shell: bash

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4
        with:
          # The command 'git describe' (used for version) needs the history.
          fetch-depth: 0

      - name: 🖉 Assemble artifact name
        id: artifact_name
        run: |
          echo "ghdl_artifact=${{ inputs.macos_artifact }}-${{ inputs.backend }}" >> $GITHUB_OUTPUT

      - name: 🔧 Install dependencies
        run: |
          brew install llvm

          echo "LLVM_BINARY_PATH=$(brew --prefix llvm)/bin" >> $GITHUB_ENV

      - name: 🔧 Install GNAT
        run: |
          GNAT_NAME="gnat-${{ inputs.gnat_arch }}-darwin-${{ inputs.gnat_version }}"
          GNAT_URL="https://github.com/alire-project/GNAT-FSF-builds/releases/download/gnat-${{ inputs.gnat_version }}/${GNAT_NAME}.tar.gz"

          echo "Downloading GNAT ${{ inputs.gnat_version }} (${{ inputs.gnat_arch }}) from '$GNAT_URL'"
          wget -q --show-progress --progress=bar:force:noscroll -O GNAT.tar.gz "$GNAT_URL"
          test $? -ne 0 && echo -e "ERROR: Downloading '$GNAT_URL'" && exit 1
          ls -lAh

          tar -zxf GNAT.tar.gz && rm GNAT.tar.gz
          test $? -ne 0 && echo -e "ERROR: Extracting 'GNAT.tar.gz'" && exit 1
          mv ${GNAT_NAME} gnat

          ./gnat/bin/gnatls -v

          echo "GNAT_BINARY_PATH=$(pwd)/gnat/bin" >> $GITHUB_ENV

      - name: Prepare build environment
        run: |
          mkdir -p build/${{ inputs.backend }}
          echo "PATH=$GNAT_BINARY_PATH:$LLVM_BINARY_PATH:$PATH" >> $GITHUB_ENV

      - name: Check build environemnt
        run: |
          echo $PATH
          echo "which gnat:        $(which gnat) ($($(which gnat) --version))"
          echo "which gnatmake:    $(which gnatmake) ($($(which gnatmake) --version))"
          echo "which llvm-config: $(which llvm-config) ($($(which llvm-config) --version))"

      - name: ⚙ Configure
        run: |
          cd build/${{ inputs.backend }}

          if [ '${{ inputs.macos_image }}' == 'macos-14' ]; then
            CONFIG_LDFLAGS="-Wl,-ld_classic"
          fi
          echo "LDFLAGS=$CONFIG_LDFLAGS"

          if ${{ startsWith(inputs.backend, 'llvm') }}; then
            CONFIG_ARGS="--with-llvm-config"
            if ${{ endsWith(inputs.backend, 'jit') }}; then
              CONFIG_ARGS="$CONFIG_ARGS --with-llvm-jit"
            fi
            # CONFIG_ARGS="$CONFIG_ARGS CXX=clang++"
          fi
          echo "CONFIG_ARGS=$CONFIG_ARGS"

          # Use static libs (including libzstd) and dead-strip (to avoid libz3)
          libzstd=$(brew --prefix zstd)/lib/libzstd.a
          export LLVM_LDFLAGS="$(llvm-config --link-static --libfiles --system-libs | sed -e s@-lzstd@$libzstd@) -Wl,-dead_strip,-dead_strip_dylibs"
          echo "LLVM_LDFLAGS=$LLVM_LDFLAGS"

          # Use classic ld and not lld (which simply crashes)
          NPROC=$(sysctl -n hw.logicalcpu)
          GNATMAKE="gnatmake -j$NPROC" \
          MAKE="make -j$NPROC" \
          LDFLAGS=$CONFIG_LDFLAGS \
          ../../configure --prefix=../../install $CONFIG_ARGS

      - name: 🔨 Make
        run: |
          cd build/${{ inputs.backend }}
          make

      - name: 📋 Install
        run: |
          cd build/${{ inputs.backend }}
          sudo make install

      - name: "🚦 Run testsuite: 'sanity'"
        run: |
          export GHDL=$(pwd)/install/bin/ghdl
          cd testsuite

          # no pyunit
          ./testsuite.sh sanity

      - name: 📤 Upload '${{ inputs.macos_artifact }}-${{ inputs.backend }}' artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.macos_artifact }}-${{ inputs.backend }}
          path: ./install
          if-no-files-found: error
          retention-days: 1

  Test:
    uses: ./.github/workflows/Test-GHDL.yml
    needs:
      - build
    if: inputs.testsuites != 'none'
    with:
      os_image:      ${{ inputs.macos_image }}
      ghdl_artifact: ${{ needs.Build.outputs.ghdl_artifact }}
      testsuites:    ${{ inputs.testsuites }}
