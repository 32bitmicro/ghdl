name: Building on Windows with MSYS2

on:
  workflow_call:
    inputs:
      windows_image:
        description: 'Name of the Windows image.'
        required: false
        default: 'windows-latest'
        type: string
      runtime:
        description: 'MSYS2 runtime'
        required: true
        type: string
      backend:
        description: 'GHDL backend'
        required: true
        type: string
      testsuites:
        description: 'GHDL testsuites'
        required: true
        type: string
      windows_artifact:
        description: 'Name of the Windows build artifact.'
        required: true
        type: string
      pacman_artifact:
        description: 'Name of the MSYS2 package artifact.'
        required: true
        type: string

jobs:
  Build:
    name: Build GHDL on Windows Server + MSYS2
    runs-on: ${{ inputs.windows_image }}
    outputs:
      ghdl_artifact: ${{ steps.artifact_name.outputs.ghdl_artifact }}

    env:
      msys2_packages: "make"
      common_packages: "gcc:p gcc-ada:p diffutils:p zlib:p"
      mcode_packages: ""
      llvm_packages: "llvm:p clang:p"

    defaults:
      run:
        shell: "msys2 {0}"

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ghdl/ghdl
          # The command 'git describe' (used for version) needs the history.
          fetch-depth: 0

      - name: 'üü¶ Setup MSYS2 for ${{ inputs.runtime }}'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ inputs.runtime }}
          update: true
          install: ${{ env.msys2_packages }}
          pacboy: ${{ env.common_packages }} ${{ env.mcode_packages }} ${{ env.llvm_packages }}

      - name: Assemble artifact name
        id: artifact_name
        run: |
          echo "ghdl_artifact=${{ inputs.windows_artifact }}-${{ inputs.runtime }}-${{ inputs.backend }}" >> $GITHUB_OUTPUT

      - name: Check build environemnt
        run: |
          echo "which gnat:        $(which gnat) ($($(which gnat) --version))"
          echo "which gnatmake:    $(which gnatmake) ($($(which gnatmake) --version))"
          echo "which llvm-config: $(which llvm-config) ($($(which llvm-config) --version))"

      - name: Prepare build environemnt
        run: |
          mkdir -p build/${{ inputs.backend }}
          mkdir -p install

      - name: ‚öô Configure
        run: |
          cd build/${{ inputs.backend }}

          if ${{ startsWith(inputs.backend, 'llvm') }}; then
            CONFIG_ARGS="--with-llvm-config"
            if ${{ endsWith(inputs.backend, 'jit') }}; then
              CONFIG_ARGS="$CONFIG_ARGS --with-llvm-jit"
            fi
            CONFIG_ARGS="$CONFIG_ARGS CXX=clang++"
          fi
          echo "CONFIG_ARGS=$CONFIG_ARGS"

          NPROC=$(nproc)
          GNATMAKE="gnatmake -j$NPROC" \
          MAKE="make -j$NPROC" \
          ../../configure --prefix=../../install $CONFIG_ARGS

      - name: üî® Make
        run: |
          cd build/${{ inputs.backend }}
          make

      - name: üìã Install
        run: |
          cd build/${{ inputs.backend }}
          make install

      - name: üìã Write requirements file
        run: |
          cd install
          ls -lAh
          if [ '${{ inputs.runtime }}' == 'mingw64' ]; then
            MSYS2_PREFIX=mingw64/mingw-w64-x86_64
          elif [ '${{ inputs.runtime }}' == 'ucrt64' ]; then
            MSYS2_PREFIX=ucrt64/mingw-w64-ucrt-x86_64
          fi
          echo "${MSYS2_PREFIX}-gcc-ada" >> ${{ inputs.runtime }}.requirements
          if ${{ startsWith(inputs.backend, 'llvm') }}; then
           echo "${MSYS2_PREFIX}-llvm-libs" >> ${{ inputs.runtime }}.requirements
          fi

      - name: Run 'sanity' from testsuite
        run: |
          export GHDL=$(pwd)/install/bin/ghdl
          cd testsuite

          # no pyunit
          ./testsuite.sh sanity

      - name: üì§ Upload '${{ steps.artifact_name.outputs.ghdl_artifact }}' artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact_name.outputs.ghdl_artifact }}
          path: ./install
          if-no-files-found: error
          retention-days: 1

  Test:
    name:
    uses: ./.github/workflows/Test-GHDL.yml
    needs:
      - Build
    if: inputs.testsuites != 'none'
    with:
      os_image:      ${{ inputs.windows_image }}
      runtime:       ${{ inputs.runtime }}
      shell:         "msys2 {0}"
      ghdl_artifact: ${{ needs.Build.outputs.ghdl_artifact }}
      testsuites:    ${{ inputs.testsuites }}

  Package:
    name: Package GHDL on Windows Server + MSYS2
    runs-on: windows-latest
    needs:
      - Build

    if: inputs.pacman_artifact != ''


    defaults:
      run:
        shell: "msys2 {0}"

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ghdl/ghdl

      - name: 'üü¶ Setup MSYS2 for ${{ inputs.runtime }}'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ inputs.runtime }}
          update: true
          install: ${{ env.msys2_packages }}
          pacboy: "${{ env.common_packages }} ${{ env.mcode_packages }} ${{ env.llvm_packages }}"

  Install:
    name: Install and Test GHDL on Windows Server + MSYS2
    runs-on: windows-latest
    needs:
      - Package

    if: inputs.pacman_artifact != ''

    defaults:
      run:
        shell: "msys2 {0}"

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ghdl/ghdl

      - name: 'üü¶ Setup MSYS2 for ${{ inputs.runtime }}'
        uses: msys2/setup-msys2@v2
        with:
          update: true
