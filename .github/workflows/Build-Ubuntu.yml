name: Building on Ubuntu

on:
  workflow_call:
    inputs:
      ubuntu_image:
        description: 'Name of the Ubuntu image.'
        required: true
        type: string
      backend:
        description: 'GHDL backend'
        required: true
        type: string
      testsuites:
        description: 'GHDL testsuites'
        required: true
        type: string
      ubuntu_artifact:
        description: 'Name of the Ubuntu build artifact.'
        required: true
        type: string
      html_artifact:
        description: 'Name of the HTML documentation artifact.'
        required: true
        type: string
      latex_document:
        description: 'LaTeX root document without *.tex extension.'
        required: true
        type: string
      latex_artifact:
        description: 'Name of the LaTeX documentation artifact.'
        required: true
        type: string
      pdf_artifact:
        description: 'Name of the PDF documentation artifact.'
        required: true
        type: string

jobs:
  Build:
    name: Build GHDL on '${{ inputs.ubuntu_image }}'
    runs-on: ${{ inputs.ubuntu_image }}

    defaults:
      run:
        shell: bash

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ghdl/ghdl

      - name: 🔧 Install dependencies
        run: |
          [ '${{ inputs.backend }}' == 'llvm' ]     && APT_ARGS='llvm clang'                        || unset LLVM_ARGS
          [ '${{ inputs.backend }}' == 'llvm-jit' ] && APT_ARGS='llvm clang'                        || unset LLVM_ARGS
          [ '${{ inputs.backend }}' == 'gcc' ]      && APT_ARGS='libgmp-dev libmpfr-dev libmpc-dev' || unset LLVM_ARGS

          sudo apt-get update
          sudo apt-get install -y --no-install-recommends gcc g++ gnat $APT_ARGS

      - name: "Download GCC sources"
        if: inputs.backend == 'gcc'
        run: |
          GCC_VERSION="14.2.0"
          GCC_URL="https://github.com/gcc-mirror/gcc/archive/refs/tags/releases/gcc-${GCC_VERSION}.tar.gz"
          echo "GCC download URL: $GCC_URL"
          mkdir -p gcc-srcs
          curl -L "$GCC_URL" | tar -xz -C gcc-srcs --strip-components=1
          ls -lAh gcc-srcs

      - name: Prepare build environment
        run: |
          mkdir -p build/${{ inputs.backend }}
          ./configure --help

      - name: ⚙ Configure
        run: |
          cd build/${{ inputs.backend }}

          [ '${{ inputs.backend }}' == 'llvm' ]     && CONFIG_ARGS='--with-llvm-config CXX=clang++'                 || unset LLVM_ARGS
          [ '${{ inputs.backend }}' == 'llvm-jit' ] && CONFIG_ARGS='--with-llvm-config --with-llvm-jit CXX=clang++' || unset LLVM_ARGS
          [ '${{ inputs.backend }}' == 'gcc' ]      && CONFIG_ARGS='--with-gcc=../../gcc-srcs'                      || unset LLVM_ARGS

          NPROC=$(nproc)
          GNATMAKE="gnatmake -j$NPROC" \
          MAKE="make -j$NPROC" \
          ../../configure --prefix=../../install $CONFIG_ARGS

      - name: Copy sources
        if: inputs.backend == 'gcc'
        run: |
          cd build/${{ inputs.backend }}
          make -j$(nproc) copy-sources

      - name: Configure GCC
        if: inputs.backend == 'gcc'
        run: |
          mkdir gcc-objs
          cd gcc-objs

          ../gcc-srcs/configure \
            --enable-languages=c,vhdl \
            --disable-bootstrap \
            --disable-lto \
            --disable-multilib \
            --disable-libssp \
            --disable-libgomp \
            --disable-libquadmath \
            "$(gcc -v 2>&1 | grep -o -- --enable-default-pie)"

      - name: 🔨 Make
        run: |
          cd build/${{ inputs.backend }}
          make -j$(nproc)

      - name: 🔨 Make ghdllib
        if: inputs.backend == 'gcc'
        run: |
          cd build/${{ inputs.backend }}
          make -j$(nproc) ghdllib

      - name: 📋 Install
        run: |
          cd build/${{ inputs.backend }}
          sudo make -j$(nproc) install

      - name: 📋 Write requirements file
        run: |
          ls -lAh
          if [ '${{ inputs.ubuntu_image }}' == 'ubuntu-22.04' ]; then
            echo "libgnat-10" >> ubuntu.requirements
          else
            echo "libgnat-13" >> ubuntu.requirements
          fi

          if [ '${{ inputs.backend }}' == 'llvm' || '${{ inputs.backend }}' == 'llvm-jit' ]; then
            if [ '${{ inputs.ubuntu_image }}' == 'ubuntu-22.04' ]; then
              echo "libllvm" >> ubuntu.requirements
            else
              echo "libllvm18" >> ubuntu.requirements
            fi
          fi
          sudo cp ubuntu.requirements ./install

      - name: Run 'sanity' from testsuite
        run: |
          export GHDL=$(pwd)/install/bin/ghdl
          cd testsuite

          # no pyunit
          ./testsuite.sh sanity

      - name: 📤 Upload '${{ inputs.ubuntu_artifact }}-${{ inputs.backend }}' artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.ubuntu_artifact }}-${{ inputs.backend }}
          path: ./install
          if-no-files-found: error
          retention-days: 1

  Test:
    uses: ./.github/workflows/Test-GHDL.yml
    needs:
      - build
    if: inputs.testsuites != 'none'
    with:
      os_image:      ${{ inputs.ubuntu_image }}
      ghdl_artifact: ${{ inputs.ubuntu_artifact }}-${{ inputs.backend }}
      testsuites:    ${{ inputs.testsuites }}

  Sphinx:
    uses: ./.github/workflows/Documentation-Sphinx.yml
    needs:
      - build
    if: inputs.ubuntu_image == 'ubuntu-24.04' && inputs.backend == 'mcode'
    with:
      ghdl_artifact: ${{ inputs.ubuntu_artifact }}-${{ inputs.backend }}
      html_artifact: ${{ inputs.html_artifact }}
      latex_document: ${{ inputs.latex_document }}
      latex_artifact: ${{ inputs.latex_artifact }}
      pdf_artifact: ${{ inputs.pdf_artifact }}
