name: Building on Ubuntu

on:
  workflow_call:
    inputs:
      ubuntu_image:
        description: 'Name of the Ubuntu image.'
        required: true
        type: string
      backend:
        description: 'GHDL backend'
        required: true
        type: string
      testsuites:
        description: 'GHDL testsuites'
        required: true
        type: string
      ubuntu_artifact:
        description: 'Name of the Ubuntu build artifact.'
        required: false
        default: ''
        type: string
      html_artifact:
        description: 'Name of the HTML documentation artifact.'
        required: false
        default: ''
        type: string
      latex_document:
        description: 'LaTeX root document without *.tex extension.'
        required: false
        default: ''
        type: string
      latex_artifact:
        description: 'Name of the LaTeX documentation artifact.'
        required: false
        default: ''
        type: string
      pdf_artifact:
        description: 'Name of the PDF documentation artifact.'
        required: false
        default: ''
        type: string
    outputs:
      ghdl_ubuntu_artifact:
        description: "Artifact name for compiled GHDL for ubuntu."
        value: ${{ jobs.Build.outputs.ghdl_artifact }}

jobs:
  Build:
    name: Build GHDL on '${{ inputs.ubuntu_image }}'
    runs-on: ${{ inputs.ubuntu_image }}
    outputs:
      ghdl_artifact: ${{ steps.artifact_name.outputs.ghdl_artifact }}

    defaults:
      run:
        shell: bash

    steps:
      - name: ⏬ Checkout repository
        uses: actions/checkout@v4
        with:
          # The command 'git describe' (used for version) needs the history.
          fetch-depth: 0

      - name: Assemble artifact name
        id: artifact_name
        run: |
          echo "ghdl_artifact=${{ inputs.ubuntu_artifact }}-${{ inputs.backend }}" >> $GITHUB_OUTPUT

      - name: 🔧 Install dependencies
        run: |
          APT_ARGS="gcc g++ gnat"
          if ${{ startsWith(inputs.backend, 'mcode') }}; then
            APT_ARGS="$APT_ARGS"
          elif ${{ startsWith(inputs.backend, 'llvm') }}; then
            APT_ARGS="$APT_ARGS llvm clang"
          elif ${{ startsWith(inputs.backend, 'gcc') }}; then
            APT_ARGS="$APT_ARGS libgmp-dev libmpfr-dev libmpc-dev libgettextpo-dev flex"
          else
            echo "Unknown backend!"
            exit 1
          fi
          echo "APT_ARGS=$APT_ARGS"

          sudo apt-get update
          sudo apt-get install -y --no-install-recommends $APT_ARGS

      - name: "Download GCC sources"
        if: inputs.backend == 'gcc'
        run: |
          GCC_VERSION="13.3.0"
          GCC_URL="https://github.com/gcc-mirror/gcc/archive/refs/tags/releases/gcc-${GCC_VERSION}.tar.gz"
          echo "GCC download URL: $GCC_URL"
          mkdir -p gcc-srcs
          curl -L "$GCC_URL" | tar -xz -C gcc-srcs --strip-components=1
          ls -lAh gcc-srcs

      - name: Prepare build environment
        run: |
          mkdir -p build/${{ inputs.backend }}
          ./configure --help

      - name: ⚙ Configure
        run: |
          cd build/${{ inputs.backend }}

          if ${{ startsWith(inputs.backend, 'mcode') }}; then
            CONFIG_ARGS=""
          elif ${{ startsWith(inputs.backend, 'llvm') }}; then
            CONFIG_ARGS="--with-llvm-config"
            if ${{ endsWith(inputs.backend, 'jit') }}; then
              CONFIG_ARGS="$CONFIG_ARGS --with-llvm-jit"
            fi
            CONFIG_ARGS="$CONFIG_ARGS CXX=clang++"
          elif ${{ startsWith(inputs.backend, 'gcc') }}; then
            CONFIG_ARGS="--with-gcc=../../gcc-srcs"
          else
            echo "Unknown backend!"
            exit 1
          fi
          echo "CONFIG_ARGS=$CONFIG_ARGS"

          NPROC=$(nproc)
          GNATMAKE="gnatmake -j$NPROC" \
          MAKE="make -j$NPROC" \
          ../../configure --prefix=../../install $CONFIG_ARGS

      - name: Copy sources
        if: inputs.backend == 'gcc'
        run: |
          cd build/${{ inputs.backend }}
          make -j$(nproc) copy-sources

      - name: Configure GCC
        if: inputs.backend == 'gcc'
        run: |
          mkdir gcc-objs
          cd gcc-objs

          ../gcc-srcs/configure \
            --enable-languages=c,vhdl \
            --disable-bootstrap \
            --disable-lto \
            --disable-multilib \
            --disable-libssp \
            --disable-libgomp \
            --disable-libquadmath \
            "$(gcc -v 2>&1 | grep -o -- --enable-default-pie)"

      - name: 🔨 Make GCC
        if: inputs.backend == 'gcc'
        run: |
          cd gcc-objs
          make -j$(nproc)

      - name: 🔨 Make
        run: |
          cd build/${{ inputs.backend }}
          make -j$(nproc)

      - name: 🔨 Make ghdllib
        if: inputs.backend == 'gcc'
        run: |
          cd build/${{ inputs.backend }}
          make -j$(nproc) ghdllib

      - name: 📋 Install
        run: |
          cd build/${{ inputs.backend }}
          sudo make -j$(nproc) install

      - name: 📋 Write requirements file
        run: |
          GCC_VERSION="$(gcc --version | grep gcc)"
          echo "gcc --version:         ${GCC_VERSION}"
          regex='gcc \((.*?)\) ([0-9]+)\.([0-9]+)\.([0-9]+)'
          if [[ "${GCC_VERSION}" =~ $regex ]]; then
            # echo "GCC major version: ${BASH_REMATCH[2]}"
            GCC_MAJOR_VERSION=${BASH_REMATCH[2]}
          else
            echo "Can't parse GCC's major version!"
            exit 1
          fi

          GNAT_VERSION="$(gnatls --version | grep GNATLS)"
          echo "gnatls --version:      ${GNAT_VERSION}"
          regex='GNATLS ([0-9]+)\.([0-9]+)\.([0-9]+)'
          if [[ "${GNAT_VERSION}" =~ $regex ]]; then
            # echo "GNAT major version: ${BASH_REMATCH[1]}"
            GNAT_MAJOR_VERSION=${BASH_REMATCH[1]}
          else
            echo "Can't parse GNAT's major version!"
            exit 1
          fi

          # Common GHDL dependencies
          echo "libgnat-${GNAT_MAJOR_VERSION}" >> ubuntu.requirements

          # LLVM specific dependencies
          if ${{ startsWith(inputs.backend, 'llvm') }}; then
            LLVM_VERSION="$(llvm-config --version)"
            echo "llvm-config --version: ${LLVM_VERSION}"
            regex='([0-9]+)\.([0-9]+)\.([0-9]+)'
            if [[ "${LLVM_VERSION}" =~ $regex ]]; then
              # echo "LLVM major version: ${BASH_REMATCH[1]}"
              LLVM_MAJOR_VERSION=${BASH_REMATCH[1]}
            else
              echo "Can't parse LLVM's major version!"
              exit 1
            fi

            # echo "gcc-${GCC_MAJOR_VERSION}" >> ubuntu.requirements
            echo "gcc" >> ubuntu.requirements
            echo "libc-dev" >> ubuntu.requirements
            echo "zlib1g-dev" >> ubuntu.requirements
            echo "libllvm${LLVM_MAJOR_VERSION}" >> ubuntu.requirements
          fi

          echo -e "\e[36mCollected requirements:\e[0m"
          cat ubuntu.requirements | while read -r line; do echo -e "\e[36m  ${line}\e[0m"; done

          sudo cp ubuntu.requirements ./install

      - name: Run 'sanity' from testsuite
        run: |
          export GHDL=$(pwd)/install/bin/ghdl
          cd testsuite

          # no pyunit
          ./testsuite.sh sanity

      - name: 📤 Upload '${{ steps.artifact_name.outputs.ghdl_artifact }}' artifact
        uses: actions/upload-artifact@v4
        if: inputs.ubuntu_artifact != ''
        with:
          name: ${{ steps.artifact_name.outputs.ghdl_artifact }}
          path: ./install
          if-no-files-found: error
          retention-days: 1

  Test:
    uses: ./.github/workflows/Test-GHDL.yml
    needs:
      - Build
    if: inputs.testsuites != 'none'
    with:
      os_image:      ${{ inputs.ubuntu_image }}
      ghdl_artifact: ${{ needs.Build.outputs.ghdl_artifact }}
      testsuites:    ${{ inputs.testsuites }}

  Docker:
    uses: ./.github/workflows/Image-Docker.yml
    needs:
      - Build
    strategy:
      fail-fast: false
      matrix:
        ubuntu_version: ['22.04', '24.04']
        backend:        ['mcode', 'llvm' ]
    with:
      ghdl_artifact:       ${{ needs.Build.outputs.ghdl_artifact }}
      ubuntu_version:      ${{ matrix.ubuntu_version }}
      backend:             ${{ matrix.backend }}
#      dockerhub_image:     ghdl-test
      testsuites:          ${{ inputs.testsuites }}
    secrets: inherit

  Sphinx:
    uses: ./.github/workflows/Documentation-Sphinx.yml
    needs:
      - Build
    if: inputs.ubuntu_image == 'ubuntu-24.04' && inputs.backend == 'mcode' && ( inputs.html_artifact != '' || inputs.latex_artifact != '')
    with:
      ghdl_artifact:  ${{ needs.Build.outputs.ghdl_artifact }}
      html_artifact:  ${{ inputs.html_artifact }}
      latex_document: ${{ inputs.latex_document }}
      latex_artifact: ${{ inputs.latex_artifact }}
      pdf_artifact:   ${{ inputs.pdf_artifact }}
